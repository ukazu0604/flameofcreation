async function agent(ask) {

    var system = `あなたは、ユーザーの発言に応じて、次のいずれかを返答するエージェントです。
    1. qa: ユーザーの発言に対して、よくある質問に回答する。全体の８割これで回答される。
    2. search: ユーザーの発言に関連する情報をWeb検索し、結果を返す。調べる必要がある場合に使われる。
    3. deepthink: ユーザーの発言に対して深く考察し、詳細な回答を提供する。
    4. story: ユーザーの発言に基づいて物語を生成する。物語形式がわかりやすいトピックの場合はこれを使う。
    あなたは、ユーザーの発言に対して、適切なアクションを選択し、その結果を返答します。
    ユーザーの発言は、あなたの判断に基づいて適切なアクションを選択するための情報源です。
    ユーザーの発言に対して、適切なアクションを選択し、その結果を返答してください。
    `;
    var q = `ユーザーの発言に応じて、次のいずれかを返答してください：qa / search / deepthink / story 
    発言: "${ask}"`
    const actionType = await sendChatRequest(q, false, system);

    let result;
    console.log("アクションタイプ:", actionType); // アクションタイプをコンソールに出力


    // 後で共通化する！！
    switch (true) {
        case actionType.includes("search"):
            RAG(ask);
            break;
        case actionType.includes("deepthink"):
            var system = `超深層思考モード。より高度な厳密性、細部への注意、そして多角的な検証を実行します。まずタスクの概要をまとめ、問題をサブタスクに分解することから始めてください。各サブタスクについて、最初は無関係またはありそうにないと思われるものも含め、複数の視点を探求してください。あらゆる段階で、自身の仮定を意図的に反証または挑戦することを試みてください。全てを三重に検証してください。各ステップを批判的にレビューし、あなたの論理、仮定、結論を精査し、不確実性や代替的な視点を明確に指摘してください。代替的な方法論やツールを用いてあなたの推論を独立して検証し、全ての事実、推論、結論を外部データ、計算、または権威ある情報源と照合してください。通常使用する検証ツールや方法の少なくとも2倍の数を意図的に探し出し、使用してください。あなたの主張を相互検証するために、数学的な検証、ウェブ検索 (のシミュレーション)、論理評価フレームワーク、および追加リソースを明確かつ積極的に使用してください。あなたの解決策に完全に自信がある場合でも、弱点、論理的なギャップ、隠れた仮定、または見落としを体系的に探すために、追加の時間と労力を明確に割いてください。これらの潜在的な落とし穴と、それらにどのように対処したかを明確に文書化してください。あなたの分析が堅牢で完全であると完全に確信したら、意図的に一時停止し、思考の連鎖全体を最初からもう一度再考するように強制してください。この最後の内省的なステップを明確に詳述してください。`
            var q = await sendChatRequest(ask, false, system);
            sendChatRequest(ask, false, q);
            break;
        case actionType.includes("qa"):
            var system = `よくある質問に回答するモード。最低五個質問を考えてそれに答えてください。
質問は「Q:」で始まり、回答は「A:」で始まります。生成はQ:　で始めてください。見やすいように問題だけ太文字を使ってください。  `
            sendChatRequest(ask, false, system);
            break;
        case actionType.includes("story"):
            var system = `対話物語モード。登場人物に会話させて本質が何かを考えさせる。`
            sendChatRequest(ask, false, system);
            break;
        default:
            sendChatRequest(ask, false, "箇条書き");
    }
}